---
export interface Props {
  title: string;
}
const { title } = Astro.props;
---

<details>
  <summary class="text-xl font-semibold text-p-black">
    <span class="text-lg">Contenido:</span>
    {title}
  </summary>
  <slot />
</details>

<script>
  const details = document.querySelector("details");

  if (details) {
    details.addEventListener("click", (e) => {
      if (details.hasAttribute("open")) {
        // since it's not closed yet, it's open!
        e.preventDefault(); // stop the default behavior, meaning - the hiding
        details.classList.add("closing"); // add a class which applies the animation in CSS
      }
    });

    // when the "close" animation is over
    details.addEventListener("animationend", (e) => {
      if (e.animationName === "close") {
        details.removeAttribute("open"); // close the element
        details.classList.remove("closing"); // remove the animation
      }
    });
  }
</script>

<style is:global>
  @keyframes open {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  /* closing animation */
  @keyframes close {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }
  details[open] summary ~ * {
    animation: open 0.5s;
  }

  /* closing class */
  details.closing summary ~ * {
    animation: close 0.5s;
  }
</style>
