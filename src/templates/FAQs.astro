---
import AnchorButton from "@components/AnchorButton.astro";
import Tag from "@components/Tag.astro";
---

<section class="p-2 grid grid-cols-1 justify-items-center">
  <Tag text="¿Tienes una duda?" />
  <h4 class="mt-2 text-3xl font-bold text-center">Preguntas frecuentes</h4>
  <p class="mt-8 text-gray-500 text-lg text-center mb-4">
    ¿Tu duda no aparece aquí?
  </p>
  <AnchorButton
    text="Envíanos tu pregunta"
    hrefSrc="mailto:hola@budgetmaster.space"
  />

  <div class="mt-10 grid grid-cols-1 justify-items-center mb-40">
    <details>
      <summary class="text-xl font-semibold text-main-analogous"
        >¿Cómo funciona la versión gratuita?</summary
      >
      <div class="content">
        <p class="my-4 pl-4 text-lg text-gray-700 text-pretty">
          Puedes usar la versión gratuita en un solo dispositivo. La conexión a
          internet no es necesaria para la versión gratuita. Tienes acceso a
          todas las funcionalidades de crear cuentas, crear registros y ver tus
          estadísticas.
        </p>
        <p class="text-lg pl-4 text-gray-700 text-pretty">
          Tus datos se guardan de manera local en tu navegador. Si limpias los
          datos de tu navegador, asimismo tus datos de la aplicación se
          eliminarán
        </p>
      </div>
    </details>
  </div>
</section>

<script>
  class Accordion {
    private el: HTMLDetailsElement;
    private summary: HTMLElement;
    private content: HTMLElement | null;
    private animation: Animation | null;
    private isClosing: boolean;
    private isExpanding: boolean;

    constructor(el: HTMLDetailsElement) {
      // Store the <details> element
      this.el = el;
      // Store the <summary> element
      this.summary = el.querySelector("summary") as HTMLElement;
      // Store the <div class="content"> element
      this.content = el.querySelector(".content");

      // Store the animation object (so we can cancel it if needed)
      this.animation = null;
      // Store if the element is closing
      this.isClosing = false;
      // Store if the element is expanding
      this.isExpanding = false;

      // Detect user clicks on the summary element
      this.summary.addEventListener("click", (e) => this.onClick(e));
    }

    private onClick(e: MouseEvent): void {
      // Stop default behaviour from the browser
      e.preventDefault();

      // Add an overflow on the <details> to avoid content overflowing
      this.el.style.overflow = "hidden";

      // Check if the element is being closed or is already closed
      if (this.isClosing || !this.el.open) {
        this.open();
        // Check if the element is being opened or is already open
      } else if (this.isExpanding || this.el.open) {
        this.shrink();
      }
    }

    private shrink(): void {
      // Set the element as "being closed"
      this.isClosing = true;

      // Store the current height of the element
      const startHeight = `${this.el.offsetHeight}px`;
      // Calculate the height of the summary
      const endHeight = `${this.summary.offsetHeight}px`;

      // If there is already an animation running
      if (this.animation) {
        // Cancel the current animation
        this.animation.cancel();
      }

      // Start a WAAPI animation
      this.animation = this.el.animate(
        {
          // Set the keyframes from the startHeight to endHeight
          height: [startHeight, endHeight],
        },
        {
          duration: 400,
          easing: "ease-out",
        }
      );

      // When the animation is complete, call onAnimationFinish()
      this.animation.onfinish = () => this.onAnimationFinish(false);
      // If the animation is cancelled, isClosing variable is set to false
      this.animation.oncancel = () => (this.isClosing = false);
    }

    private open(): void {
      // Apply a fixed height on the element
      this.el.style.height = `${this.el.offsetHeight}px`;
      // Force the [open] attribute on the details element
      this.el.open = true;
      // Wait for the next frame to call the expand function
      window.requestAnimationFrame(() => this.expand());
    }

    private expand(): void {
      if (!this.content) return;

      // Set the element as "being expanding"
      this.isExpanding = true;

      // Get the current fixed height of the element
      const startHeight = `${this.el.offsetHeight}px`;
      // Calculate the open height of the element (summary height + content height)
      const endHeight = `${this.summary.offsetHeight + this.content.offsetHeight}px`;

      // If there is already an animation running
      if (this.animation) {
        // Cancel the current animation
        this.animation.cancel();
      }

      // Start a WAAPI animation
      this.animation = this.el.animate(
        {
          // Set the keyframes from the startHeight to endHeight
          height: [startHeight, endHeight],
        },
        {
          duration: 400,
          easing: "ease-out",
        }
      );

      // When the animation is complete, call onAnimationFinish()
      this.animation.onfinish = () => this.onAnimationFinish(true);
      // If the animation is cancelled, isExpanding variable is set to false
      this.animation.oncancel = () => (this.isExpanding = false);
    }

    private onAnimationFinish(open: boolean): void {
      // Set the open attribute based on the parameter
      this.el.open = open;
      // Clear the stored animation
      this.animation = null;
      // Reset isClosing & isExpanding
      this.isClosing = false;
      this.isExpanding = false;
      // Remove the overflow hidden and the fixed height
      this.el.style.height = this.el.style.overflow = "";
    }
  }

  document.querySelectorAll<HTMLDetailsElement>("details").forEach((el) => {
    new Accordion(el);
  });
</script>
